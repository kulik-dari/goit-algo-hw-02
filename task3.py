def check_brackets(expression):
    """
    Перевіряє, чи правильно збалансовані та вкладені дужки у виразі
    
    Аргументи:
        expression (str): Рядок, що містить дужки та інші символи
        
    Повертає:
        str: "Симетрично", якщо дужки збалансовані та правильно вкладені, 
             "Несиметрично" - в іншому випадку
    """
    # Словник, що зіставляє відкриваючі дужки з відповідними закриваючими
    brackets_pairs = {
        '(': ')',
        '[': ']',
        '{': '}'
    }
    
    # Набори відкриваючих і закриваючих дужок для швидкої перевірки
    opening_brackets = set(brackets_pairs.keys())
    closing_brackets = set(brackets_pairs.values())
    
    # Створюємо порожній стек для зберігання відкритих дужок
    stack = []
    
    # Проходимо по кожному символу у виразі
    for char in expression:
        # Якщо символ - відкриваюча дужка
        if char in opening_brackets:
            # Додаємо її до стеку
            stack.append(char)
        
        # Якщо символ - закриваюча дужка
        elif char in closing_brackets:
            # Якщо стек порожній (немає відповідної відкриваючої дужки)
            if not stack:
                return "Несиметрично"
            
            # Беремо останню відкриваючу дужку зі стеку
            last_opening = stack.pop()
            
            # Перевіряємо, чи відповідає закриваюча дужка відкриваючій
            if brackets_pairs[last_opening] != char:
                return "Несиметрично"
    
    # Після обробки всіх символів стек повинен бути порожнім
    # Якщо у стеку залишилися дужки, то вони не мають відповідних закриваючих
    if stack:
        return "Несиметрично"
    else:
        return "Симетрично"

def main():
    """Головна функція для демонстрації перевірки симетричності дужок"""
    print("Перевірка симетричності дужок за допомогою стеку")
    print("--------------------------------------------------")
    
    # Тестові випадки з завдання
    test_cases = [
        "(){[ 1 ]( 1 + 3 )( ){ }}",  # Симетрично
        "( 23 ( 2 - 3);",             # Несиметрично (незакрита дужка)
        "( 11 }",                     # Несиметрично (невідповідні типи дужок)
        "()",                         # Симетрично
        "[]",                         # Симетрично
        "{}",                         # Симетрично
        "({[]})",                     # Симетрично (вкладені різні типи дужок)
        "([)]",                       # Несиметрично (невірний порядок закриття)
        "{[(())]",                    # Несиметрично (незакрита дужка)
        "((()))(())()",               # Симетрично (послідовні групи)
        "",                           # Симетрично (порожній рядок)
        "5 + 7 * (3 - 2) / {4}",      # Симетрично (математичний вираз)
        "if (x > 5) { return [x]; }", # Симетрично (код)
        "({)}"                        # Несиметрично (перехресні дужки)
    ]
    
    # Проходимо по всіх тестових випадках
    for expr in test_cases:
        # Перевіряємо симетричність дужок
        result = check_brackets(expr)
        
        # Виводимо результат
        print(f'"{expr}": {result}')
    
    # Інтерактивна частина для перевірки користувацьких виразів
    print("\n--- Введіть власні вирази для перевірки ---")
    while True:
        # Отримуємо вираз від користувача
        user_input = input("\nВведіть вираз (або 'q' для виходу): ")
        
        # Перевіряємо, чи користувач хоче вийти
        if user_input.lower() == 'q':
            break
        
        # Перевіряємо симетричність дужок у виразі
        result = check_brackets(user_input)
        
        # Виводимо результат
        print(f'"{user_input}": {result}')

# Запускаємо програму, якщо файл виконується напряму
if __name__ == "__main__":
    main()
