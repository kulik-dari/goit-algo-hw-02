from collections import deque  # Імпортуємо deque з модуля collections

def is_palindrome(text):
    """
    Перевіряє, чи є заданий рядок паліндромом, використовуючи двосторонню чергу (deque)
    
    Паліндром - це слово, фраза або послідовність символів, які читаються однаково 
    зліва направо і справа наліво, ігноруючи регістр символів, пробіли та розділові знаки.
    
    Аргументи:
        text (str): Рядок для перевірки
        
    Повертає:
        bool: True, якщо рядок є паліндромом, False - в іншому випадку
    """
    # 1. Підготовка тексту: видаляємо всі символи, крім букв та цифр,
    # і переводимо всі символи в нижній регістр
    cleaned_text = ''.join(char.lower() for char in text if char.isalnum())
    
    # Перевіряємо граничні випадки: порожній рядок або один символ завжди є паліндромами
    if len(cleaned_text) <= 1:
        return True
    
    # 2. Створюємо двосторонню чергу (deque) і додаємо всі символи
    char_deque = deque(cleaned_text)
    
    # 3. Порівнюємо символи з обох кінців, поки deque не стане порожнім або не залишиться один символ
    while len(char_deque) > 1:
        # Видаляємо і отримуємо символ з початку черги (зліва)
        left_char = char_deque.popleft()
        
        # Видаляємо і отримуємо символ з кінця черги (справа)
        right_char = char_deque.pop()
        
        # Порівнюємо символи - якщо вони не співпадають, це не паліндром
        if left_char != right_char:
            return False
    
    # Якщо ми пройшли через весь цикл і не знайшли невідповідності, це паліндром
    return True

def main():
    """Головна функція для демонстрації роботи перевірки паліндромів"""
    print("Перевірка паліндромів за допомогою двосторонньої черги (deque)")
    print("--------------------------------------------------------------")
    
    # Тестові приклади різних паліндромів для демонстрації
    test_cases = [
        "А роза упала на лапу Азора",  # Класичний паліндром з пробілами
        "Козак з казок",               # Паліндром з пробілами
        "Я несу гусеня",               # Паліндром з пробілами
        "Аргентина манить негра",      # Паліндром з пробілами
        "Привіт світ",                 # Не паліндром
        "Мадам, я Адам",               # Паліндром з комою і пробілами
        "",                            # Порожній рядок (за визначенням, паліндром)
        "а",                           # Один символ (завжди паліндром)
        "Око",                         # Короткий паліндром
        "І що сало? Ласощі.",          # Паліндром з розділовими знаками
        "123454321",                   # Цифровий паліндром
        "No lemon, no melon"           # Англійський паліндром з комою і пробілами
    ]
    
    # Проходимо по всіх тестових прикладах
    for text in test_cases:
        # Визначаємо, чи є рядок паліндромом
        result = is_palindrome(text)
        
        # Виводимо результат
        status = "є" if result else "не є"
        print(f'"{text}" {status} паліндромом')
    
    # Інтерактивна частина для перевірки користувацьких рядків
    print("\n--- Введіть власні рядки для перевірки ---")
    while True:
        # Отримуємо рядок від користувача
        user_input = input("\nВведіть рядок для перевірки (або 'q' для виходу): ")
        
        # Перевіряємо, чи користувач хоче вийти
        if user_input.lower() == 'q':
            break
        
        # Визначаємо, чи є рядок паліндромом
        result = is_palindrome(user_input)
        
        # Виводимо результат
        status = "є" if result else "не є"
        print(f'"{user_input}" {status} паліндромом')

# Запускаємо програму, якщо файл виконується напряму
if __name__ == "__main__":
    main()
